/*! push.js 2014-09-10 */
function onDeviceReady(){$("#app-status-ul").append("<li>deviceready event received</li>"),document.addEventListener("backbutton",function(a){$("#app-status-ul").append("<li>backbutton event received</li>"),$("#home").length>0?(a.preventDefault(),navigator.app.exitApp()):navigator.app.backHistory()},!1);try{pushNotification=window.plugins.pushNotification,$("#app-status-ul").append("<li>registering "+device.platform+"</li>"),"android"==device.platform||"Android"==device.platform||"amazon-fireos"==device.platform?pushNotification.register(successHandler,errorHandler,{senderID:"405221447351",ecb:"onNotification"}):pushNotification.register(tokenHandler,errorHandler,{badge:"true",sound:"true",alert:"true",ecb:"onNotificationAPN"})}catch(a){txt="There was an error on this page.\n\n",txt+="Error description: "+a.message+"\n\n",alert(txt)}}function onNotificationAPN(a){if(a.alert&&($("#app-status-ul").append("<li>push-notification: "+a.alert+"</li>"),navigator.notification.alert(a.alert)),a.sound){var b=new Media(a.sound);b.play()}a.badge&&pushNotification.setApplicationIconBadgeNumber(successHandler,a.badge)}function onNotification(a){switch($("#app-status-ul").append("<li>EVENT -> RECEIVED:"+a.event+"</li>"),a.event){case"registered":a.regid.length>0&&($("#app-status-ul").append("<li>REGISTERED -> REGID:"+a.regid+"</li>"),console.log("regID = "+a.regid));break;case"message":if(a.foreground){$("#app-status-ul").append("<li>--INLINE NOTIFICATION--</li>");var b=a.soundname||a.payload.sound,c=new Media("/android_asset/www/"+b);c.play()}else $("#app-status-ul").append(a.coldstart?"<li>--COLDSTART NOTIFICATION--</li>":"<li>--BACKGROUND NOTIFICATION--</li>");$("#app-status-ul").append("<li>MESSAGE -> MSG: "+a.payload.message+"</li>"),$("#app-status-ul").append("<li>MESSAGE -> MSGCNT: "+a.payload.msgcnt+"</li>"),$("#app-status-ul").append("<li>MESSAGE -> TIMESTAMP: "+a.payload.timeStamp+"</li>");break;case"error":$("#app-status-ul").append("<li>ERROR -> MSG:"+a.msg+"</li>");break;default:$("#app-status-ul").append("<li>EVENT -> Unknown, an event was received and we do not know what it is</li>")}}function tokenHandler(a){$("#app-status-ul").append("<li>token: "+a+"</li>"),console.log("regID = "+a)}function successHandler(a){$("#app-status-ul").append("<li>success:"+a+"</li>")}function errorHandler(a){$("#app-status-ul").append("<li>error:"+a+"</li>")}var PushNotification=function(){};PushNotification.prototype.register=function(a,b,c){return null==b&&(b=function(){}),"function"!=typeof b?void console.log("PushNotification.register failure: failure parameter not a function"):"function"!=typeof a?void console.log("PushNotification.register failure: success callback parameter must be a function"):void cordova.exec(a,b,"PushPlugin","register",[c])},PushNotification.prototype.unregister=function(a,b){return null==b&&(b=function(){}),"function"!=typeof b?void console.log("PushNotification.unregister failure: failure parameter not a function"):"function"!=typeof a?void console.log("PushNotification.unregister failure: success callback parameter must be a function"):void cordova.exec(a,b,"PushPlugin","unregister",[])},PushNotification.prototype.setApplicationIconBadgeNumber=function(a,b){return null==errorCallback&&(errorCallback=function(){}),"function"!=typeof errorCallback?void console.log("PushNotification.setApplicationIconBadgeNumber failure: failure parameter not a function"):"function"!=typeof a?void console.log("PushNotification.setApplicationIconBadgeNumber failure: success callback parameter must be a function"):void cordova.exec(a,a,"PushPlugin","setApplicationIconBadgeNumber",[{badge:b}])},window.plugins||(window.plugins={}),window.plugins.pushNotification||(window.plugins.pushNotification=new PushNotification);var pushNotification;document.addEventListener("deviceready",onDeviceReady,!0);
